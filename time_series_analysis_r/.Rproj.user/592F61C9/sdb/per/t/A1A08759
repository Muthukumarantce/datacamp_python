{
    "collab_server" : "",
    "contents" : "# TIME SERIES - SEQUENCE OF DATA IN CHRONOLOGICAL ORDER\n# IT IS AN OBJECT WHICH HAS TIME AS INDEX AND REPRESENTED IN X AXIS\n\n\"\"\"\nBasic Models\n  White noise \n\n  Random walk \n\n  Auto Regression \n\n  Simple Moving Average \n\"\"\"\n\n#EXPLORING RAW TIME SERIES\n\n# Print the Nile dataset\nprint(Nile)\n\n# List the number of observations in the Nile dataset\nlength(Nile)\n\n# Display the first 10 elements of the Nile dataset\nhead(Nile,n=10)\n\n# Display the last 12 elements of the Nile dataset\ntail(Nile,n=12)\n\n# Plot the Nile data\nplot(Nile)\n\nfrequency(Nile)\n\n# Plot the Nile data with xlab and ylab arguments\nplot(Nile, xlab = \"Year\", ylab = \"River Volume (1e9 m^{3})\")\n\n# Plot the Nile data with xlab, ylab, main, and type arguments\n#Type =\"b\" means it includes both lines and points represented in graph\nplot(Nile, xlab = \"Year\", ylab = \"River Volume (1e9 m^{3})\",main=\"Annual River Nile Volume at Aswan, 1871-1970\",type=\"b\")\n\n\n#par can be used to set or query graphical parameters. Parameters can be set by specifying them as arguments to par in tag = value form, or by passing them as a list of tagged values.\npar(mfrow=c(2,1))\nplot(continuous_time_index,continuous_series, type = \"b\")\n\n\"\"\"\nVarieties of Time series data\n  Equally spaced\n  Approximately spaced\n  Missed values\n\nBasic Assumptions\n\n  Consecutive observations are equally spaced\n  Apply a discrete time observation index\n  This may hold approximately\n\nSampling frequency - R functions\n\n  The start() and end() functions return the time index of the first and last observations, respectively.\n  The time() function calculates a vector of time indices, with one element for each time index on which the series was observed.\n  The deltat() function returns the fixed time interval between observations and \n  the frequency() function returns the number of observations per unit time. Finally, the cycle() function returns the position in the cycle of each observation.\n\n\"\"\"\n\n#In this exercise, you'll practice applying these functions to the AirPassengers dataset, which reports the monthly total international airline passengers (in thousands) from 1949 to 1960.\n\n# Plot AirPassengers\nplot(AirPassengers)\n\n# View the start and end dates of AirPassengers\nstart(AirPassengers)\nend(AirPassengers)\n\n# Use time(), deltat(), frequency(), and cycle() with AirPassengers \n\ntime(AirPassengers)\ndeltat(AirPassengers)\nfrequency(AirPassengers)\ncycle(AirPassengers)\n\nstr(AirPassengers)\n\n#Missing Values\n# Impute mean values to NA in AirPassengers\nAirPassengers[85:96] <- mean(AirPassengers, na.rm = TRUE)\n\n# Add the complete AirPassengers data to your plot\nrm(AirPassengers)\npoints(AirPassengers, type = \"l\", col = 2, lty = 3)\n\n\n\"\"\"\nTime series object\n  Starts with vector of data\n  Apply ts function\n\nWhy ts ()\n  Improved Plotting\n  Access to time index information\n\nis.ts()\n to check whether object is timeseries\n\"\"\"\n\ndata_vector <- runif(100,1,100)\nplot(data_vector)\n\ntime_series <- ts(data_vector,start=2004,frequency = 4)\nplot(time_series)\nprint(time_series)\n\nis.ts(data_vector)\nis.ts(AirPassengers)\n\nis.ts(EuStockMarkets)\n\n# View the start, end, and frequency of eu_stocks\nstart(EuStockMarkets)\nend(EuStockMarkets)\nfrequency(EuStockMarkets)\n\nplot(EuStockMarkets)\n\nstr(EuStockMarkets)\n\nts.plot(EuStockMarkets,col=1:4,xlab=\"Year\",ylab=\"Index value\",main=\"Major European Stock Indices,1991-1998\") + legend(\"topleft\",colnames(EuStockMarkets),lty=1,col=1:4,bty=\"n\")\n\n\n\n#Spotting Trends\n\n\"\"\"\nTrends - Periodic, Linear, Variance, Rapid Growth\n\"\"\"\n\n\"\"\"\nSample Transformations\n\n  log() --> linearize rapid growth trend\n            Stabilizes series with increasing variance\n\n  diff() --> removes linear trend\n\n  diff(,s)  --> seasonal difference transformation, remove periodic trends\n          diff(x,s=4)\n\n\"\"\"\n\n\"\"\"\nRemoving trends in variability via the logarithmic transformation\nThe logarithmic function log() is a data transformation that can be applied to positively valued time series data. It slightly shrinks observations that are greater than one towards zero, while greatly shrinking very large observations. \nThis property can stabilize variability when a series exhibits increasing variability over time. It may also be used to linearize a rapid growth pattern over time.\n\nThe time series rapid_growth has already been loaded, and is shown in the figure on the right. Note the vertical range of the data.\n\"\"\"\n\n# Generate the first difference of z\ndz = diff(z)\n# Plot dz\nts.plot(dz)\n# View the length of z and dz, respectively\nlength(z)\nlength(dz)\n\n\n  \n",
    "created" : 1579802874761.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2640454958",
    "id" : "A1A08759",
    "lastKnownWriteTime" : 1580214555,
    "last_content_update" : 1580214555032,
    "path" : "~/Documents/GitHub/datacamp_python/time_series_analysis_r/Time Series Analysis.R",
    "project_path" : "Time Series Analysis.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}